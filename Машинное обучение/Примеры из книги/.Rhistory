#Listing 2.1. Loading the MNIST dataset in Keras
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
library(keras)
mnist <- dataset_mnist()
install.packages("kerasR")
#Listing 2.1. Loading the MNIST dataset in Keras
library(kerasR)
#Listing 2.1. Loading the MNIST dataset in Keras
library(keras)
devtools::install_github("rstudio/keras")
install_keras()
install_keras()
#Listing 2.1. Loading the MNIST dataset in Keras
library(keras)
mnist <- dataset_mnist()
install_keras()
install_keras()
install_keras()
#Listing 2.1. Loading the MNIST dataset in Keras
library(keras)
mnist <- dataset_mnist()
install_keras()
devtools::install_github("rstudio/keras")
install_keras()
install_keras()
keras::install_keras()
setwd("C:/Users/Все пользователи/Anaconda3")
devtools::install_github("rstudio/keras")
install_keras()
keras::install_keras()
install.packages("reticulate")
keras::install_keras()
library(reticulate)
Sys.which("python")
py_available()
py_config()
use_python("\\Users\\F4BC~1\\Anaconda3\\python.exe")
py_available()
conda_create('r-reticulate')
install.packages("rmarkdown")
install.Rtools(choose_version = TRUE, check = FALSE, GUI = TRUE,
page_with_download_url = "https://cran.r-project.org/bin/windows/Rtools/")
install.Rtools(TRUE)
install.packages("installr")
install.Rtools(TRUE)
installr::install.Rtools(TRUE)
install.packages("tidyverse")
install.packages(c("readxl", "dplyr", "ggplot2", "ggpubr", "corrplot", "psych",
"MASS", "tree", "randomForest", "TeachingDemos", "mice", "corrgram", "magrittr",
"plotly", "factoextra"))
install.packages(c("readxl", "dplyr", "ggplot2", "ggpubr", "corrplot", "psych", "MASS", "tree", "randomForest", "TeachingDemos", "mice", "corrgram", "magrittr", "plotly", "factoextra"))
install.packages("reticulate")
devtools::install_github("rstudio/keras")
library(keras)
install_tensorflow()
keras::install_keras()
#loading keras library
library(keras)
#loading the keras inbuilt mnist dataset
data<-dataset_mnist()
install_tensorflow()
library(tensorflow)
install_tensorflow()
devtools::install_github("rstudio/tensorflow")
install_tensorflow(envname = "r-tensorflow")
#loading keras library
library(keras)
#loading the keras inbuilt mnist dataset
data<-dataset_mnist()
View(data)
data[["train"]][["x"]]
install_tensorflow(version = "nightly-gpu")  # gpu version
tensorflow::install_tensorflow(version = "nightly-gpu")  # gpu version
#Listing 2.1. Loading the MNIST dataset in Keras
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
#Listing 2.2. The network architecture
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
#Listing 2.3. The compilation step
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
#Listing 2.4. Preparing the image data
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images / 255
#Listing 2.5. Preparing the labels
train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)
network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
metrics <- network %>% evaluate(test_images, test_labels)
metrics
network %>% predict_classes(test_images[1:10,])
digit <- train_images[5,,]
plot(as.raster(digit, max = 255))
train_images <- mnist$train$x
digit <- train_images[5,,]
plot(as.raster(digit, max = 255))
#Listing 5.1. Instantiating a small convnet
library(keras)
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3, 3), activation = "relu",
input_shape = c(28, 28, 1)) %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3, 3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3, 3), activation = "relu")
model
