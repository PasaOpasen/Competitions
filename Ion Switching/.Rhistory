library(tidyverse)
library(data.table)
library(magrittr)
data.path='D:/liverpool-ion-switching/'
train.path=paste0(data.path,'train','.csv')
test.path=paste0(data.path,'test','.csv')
sample.path=paste0(data.path,'sample_submission','.csv')
answer=read_csv(sample.path)
View(answer)
write_csv(answer,"result.csv")
View(answer)
train=read_csv(train.path)
test=read_csv(test.path)
View(test)
library(tidyverse)
library(data.table)
library(magrittr)
library(caret)
library(MLmetrics)
library(doSNOW)
data.path='D:/liverpool-ion-switching/'
train.path=paste0(data.path,'train','.csv')
test.path=paste0(data.path,'test','.csv')
sample.path=paste0(data.path,'sample_submission','.csv')
dt=read_csv(train.path)
dt %<>% mutate(chan=factor(open_channels,ordered = T),chan2=factor(paste0('l',open_channels)))
dt$chan %>% summary()
data=dt %>% group_by(chan) %>% slice(sample(1:n(),35000))
ggplot(data,aes(x=time,y=signal,col=chan))+geom_point()
calcF1Scores2=function(act,prd){
#treats the vectors like classes
#act and prd must be whole numbers
df=data.frame(act=act,prd=prd);
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
tp=nrow(df[df$prd==ii & df$act==ii,]);
fp=nrow(df[df$prd==ii & df$act!=ii,]);
fn=nrow(df[df$prd!=ii & df$act==ii,]);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
f1 <- function (data, lev = NULL, model = NULL) {
answ=calcF1Scores2(data$obs,data$pred)
names(answ)="F1"
return(answ)
}
tr=trainControl(
method = 'cv',
number=10,
summaryFunction = f1,
classProbs = T,
verboseIter = T
)
data=dt %>% group_by(chan) %>% slice(sample(1:n(),30000))
fit.svm=train(x=data[c(1,2)],y=data$chan2,
method='RFlda',
trControl = tr,
maximize = T,
metric = 'F1')
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
test=read_csv(test.path)
res=fit.svm %>% predict(test) %>% str_sub(2) %>% as.numeric()
fit.svm=train(x=data[c(1,2)],y=data$chan2,
method='lda2',
trControl = tr,
maximize = T,
metric = 'F1')
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
test=read_csv(test.path)
res=fit.svm %>% predict(test) %>% str_sub(2) %>% as.numeric()
answer=read_csv(sample.path)
answer$time=format(answer$time,nsmall = 4)
#answer$open_channels=sample(0:10,answer$time %>% length(),replace = T)
answer$open_channels=res
write_csv(answer,paste0(data.path,"result.csv"))
library(tidyverse)
library(data.table)
library(magrittr)
library(caret)
library(MLmetrics)
library(doSNOW)
data.path='D:/liverpool-ion-switching/'
train.path=paste0(data.path,'train','.csv')
test.path=paste0(data.path,'test','.csv')
sample.path=paste0(data.path,'sample_submission','.csv')
dt=read_csv(train.path)
dt %<>% mutate(chan=factor(open_channels,ordered = T),chan2=factor(paste0('l',open_channels)))
data=dt %>% group_by(chan) %>% slice(sample(1:n(),30000))
data=dt %>% group_by(chan) %>% slice(sample(1:n(),25000))
ggplot(data,aes(x=time,y=signal,col=chan))+geom_point()
ggplot(data,aes(x=time,y=signal,col=chan))+geom_hex()
ggplot(data,aes(x=time,y=signal,fill=chan))+geom_hex()
ggplot(data,aes(x=time,y=signal,fill=chan))+geom_hex()+facet_grid(vars(chan))
ggplot(data,aes(x=time,y=signal,fill=chan))+geom_hex()+facet_grid(vars(chan),scales = "free")
calcF1Scores=function(act,prd){
#treats the vectors like classes
#act and prd must be whole numbers
df=data.frame(act=as.numeric(act),prd=as.numeric(prd));
scores=numeric(11);
for(i in 0:10){
tp=nrow(df[df$prd==i & df$act==i,]);
fp=nrow(df[df$prd==i & df$act!=i,]);
fn=nrow(df[df$prd!=i & df$act==i,]);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
return(mean(scores))
}
calcF1Scores2=function(act,prd){
df=data.frame(act=act,prd=prd);
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
tp=nrow(df[df$prd==ii & df$act==ii,]);
fp=nrow(df[df$prd==ii & df$act!=ii,]);
fn=nrow(df[df$prd!=ii & df$act==ii,]);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
f1 <- function (data, lev = NULL, model = NULL) {
answ=calcF1Scores2(data$obs,data$pred)
names(answ)="F1"
return(answ)
}
tr=trainControl(
method = 'cv',
number=10,
summaryFunction = f1,
classProbs = T,
verboseIter = T
)
fit.svm=train(x=data[c(1,2)],y=data$chan2,
method='lda2',
trControl = tr,
maximize = T,
metric = 'F1')
View(fit.svm)
fit.svm$resample$F1 %>% mean()
calcF1Scores2(data$chan2,fit.svm %>% predict(data))
fit.svm$results$F1 %>% mean()
fit.svm=train(x=data[c(1,2)],y=data$chan2,preProcess = c("center", "scale"),
method='lda2',
trControl = tr,
maximize = T,
metric = 'F1')
fit.svm$resample$F1 %>% mean()
calcF1Scores2(data$chan2,fit.svm %>% predict(data))
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
system.time(
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
)
calcF1Scores2=function(act,prd){
df=data.frame(act=act,prd=prd);
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
p=df$prd==ii
a=df$act==ii
tp=nrow(df[p & a,]);
fp=nrow(df[p & !a,]);
fn=nrow(df[!p & a,]);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
system.time(
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
)
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
calcF1Scores2=function(act,prd){
df=data.frame(act=act,prd=prd);
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
p=df$prd==ii
a=df$act==ii
tp=sum(p & a);
fp=sum(p & !a);
fn=sum(!p & a);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
system.time(
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
)
#system.time(
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
calcF1Scores2=function(act,prd){
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
p= prd==ii
a= act==ii
tp=sum(p & a);
fp=sum(p & !a);
fn=sum(!p & a);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
system.time(
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
)
fit.svm$resample$F1 %>% mean()
Sys.time()
t=Sys.time()
Sys.time()-t
as.integer(Sys.time()-t)
as.integer(Sys.time()-t)
fits=c('lda2')
results=list()
for(f in fits){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
results
fits=c('vglmAdjCat','treebag','bagFDA','bagEarth','bagEarthGCV','bayesglm','gamboost','glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
fits=c('treebag','bagFDA','bagEarth','bagEarthGCV','bayesglm','gamboost','glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
data=dt %>% group_by(chan) %>% slice(sample(1:n(),20000))
fits=c('treebag','bagFDA','bagEarth','bagEarthGCV','bayesglm','gamboost','glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
fits=c('bagFDA','bagEarth','bagEarthGCV','bayesglm','gamboost','glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
fits=c('gamboost','glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
fits=c('glmboost','blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
fits=c('blackboost','C5.0','rpart','rpart1SE','rpart2','rpartScore','','','','')
results=list()
for(f in fits[1:10]){
t=Sys.time()
fit=train(x=data[c(1,2)],y=data$chan2,#preProcess = c("center", "scale"),
method=f,
trControl = tr,
maximize = T,
metric = 'F1')
t=as.integer(Sys.time()-t)
fit$resample$F1 %>% mean() %>% print()
results[[f]]=list(
res=calcF1Scores2(dt$chan2,fit %>% predict(dt)),
time=t
)
}
