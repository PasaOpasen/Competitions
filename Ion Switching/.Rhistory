answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
read_csv('best py result.csv')[[2]]
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'trainsuper.csv'))
tst=read_csv(paste0(path.dir,'testsuper.csv'))
trn %<>% mutate(signal2=sign(signal)*sqrt(abs(signal))) %>%
select(-batches,-time_batch,-level2,-level_type)
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))  %>%
select(-batches,-time_batch,-level2,-level_type)
als=1:nrow(trn)
id=numeric()
for(lev in 0:1){
for(i in 0:10){
s= als[trn$open_channels==i & trn$level1==lev]
if(length(s)>0){
id= c(id,s[sample(1:length(s),min(8000,length(s)))])
}
}
}
id=sort(id)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]
tr[,2]=as.factor(tr[,2])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
colnames(train)
fit_svm <- h2o.psvm(
x = colnames(train)[-c(2,12)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
hyper_param = 1,
gamma = -1,
rank_ratio = -1,
positive_weight = 1,
negative_weight = 1,
disable_training_metrics = TRUE,
sv_threshold = 1e-04,
fact_threshold = 1e-05,
feasible_threshold = 0.001,
surrogate_gap_threshold = 0.001,
mu_factor = 10,
max_iterations = 200
)
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_best.csv'))
trn %<>% mutate(open_channels=factor(open_channels))
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=PC1, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=PC2, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=PC3, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=PC1*PC2, y=signal, col= open_channels))+
theme_bw()
library(compiler)
roll=function(vector,f,window=100){
len=length(vector)
result=numeric(length = len)
for(i in 1:(len-window+1)){
result[i]=f(vector[i:(i+window-1)])
}
result[(len-window+2):len]=result[len-window+1]
return(result)
}
rollmin_=function(vector,window=100){
len=length(vector)
result=numeric(length = len)
for(i in 1:(len-window+1)){
result[i]=min(vector[i:(i+window-1)])
}
result[(len-window+2):len]=result[len-window+1]
return(result)
}
rollmax_=function(vector,window=100){
len=length(vector)
result=numeric(length = len)
for(i in 1:(len-window+1)){
result[i]=max(vector[i:(i+window-1)])
}
result[(len-window+2):len]=result[len-window+1]
return(result)
}
rollmin=cmpfun(rollmin_)
rollmax=cmpfun(rollmax_)
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
geom_line(aes(x=time_batch, y= rollmin(signal,100)))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
geom_line(aes(x=time_batch, y= rollmin(signal,1000)),color='grey')+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
geom_line(aes(x=time_batch, y= rollmin(signal,10000)),color='grey')+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=PC7*PC2, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch*signal, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch*signal2, y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
geom_line(aes(x=time_batch, y= predict(loess(signal~time_batch,span = 0.1)) ),color='grey')+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=time_batch, y=signal, col= open_channels))+
geom_line(aes(x=time_batch, y= predict(loess(signal~time_batch,span = 0.1)) ),color='black',size=2)+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=predict(loess(signal~time_batch,span = 0.1)), y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=predict(loess(signal~time_batch,span = 0.4)), y=signal, col= open_channels))+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=predict(loess(signal~time_batch,span = 0.4)), y=signal, col= open_channels),size=2,alpha=0.9)+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=predict(loess(signal~time_batch,span = 0.01)), y=signal, col= open_channels),size=2,alpha=0.9)+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9)  %>% mutate(step=signal-c(0,signal[1:(n()-1)])) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=predict(loess(signal~time_batch,span = 0.01)), y=signal, col= open_channels),size=2,alpha=0.9)+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9)  %>% mutate(step=signal-c(0,signal[1:(n()-1)])) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=step, y=signal, col= open_channels),size=2,alpha=0.9)+
theme_bw()
ggplot(trn %>% filter(batches==4 | batches==9)  %>% mutate(step=signal-c(0,0,signal[1:(n()-2)])) %>%
group_by(open_channels) %>% slice(sample(1:n(),min(1500,n()))))+
geom_point(aes(x=step, y=signal, col= open_channels),size=2,alpha=0.9)+
theme_bw()
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_best.csv'))
tst=read_csv(paste0(path.dir,'test_best.csv'))
trn %<>% mutate(signal2=sign(signal)*sqrt(abs(signal))) %>%
select(-time_batch,-level2,-level_type,-level1,-supersignal)
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))  %>%
select(-time_batch,-level2,-level_type,-level1,-supersignal)
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'trainsuper.csv'))
tst=read_csv(paste0(path.dir,'testsuper.csv'))
trn %<>% mutate(signal2=sign(signal)*sqrt(abs(signal))) %>%
select(-batches,-time_batch,-level2,-level_type)
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))  %>%
select(-batches,-time_batch,-level2,-level_type)
als=1:nrow(trn)
id=numeric()
for(lev in 0:1){
for(i in 0:10){
s= als[trn$open_channels==i & trn$level1==lev]
if(length(s)>0){
id= c(id,s[sample(1:length(s),min(8000,length(s)))])
}
}
}
id=sort(id)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]=as.factor(tr[,2])
colnames(train)
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
colnames(train)
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2,11,12)] ,
y = 'open_channels',
training_frame =   tr,  #train,
#validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = T,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 3,
min_rows = 40,
learn_rate = 0.2,
learn_rate_annealing = 1,
col_sample_rate = 1.0,
sample_rate = 0.7,
ntrees = 40,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(2,11,12)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = T,
max_depth = c(3,4,5,6,7,8,9,10),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.5,0.65,0.8,1),
sample_rate = c(0.4,0.5,0.6,0.7,0.8,0.9) ,
ntrees = c(15,20,30,40)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 1800,
max_models = 1000, seed = 1)
)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]=as.factor(tr[,2])
#tr[,12]=as.factor(tr[,12])
#te[,11]=as.factor(te[,11])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(2,11,12)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(3,4,5,6,7,8,9,10),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.5,0.65,0.8,1),
sample_rate = c(0.4,0.5,0.6,0.7,0.8,0.9) ,
ntrees = c(15,20,30,40)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 1800,
max_models = 1000, seed = 1)
)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]=as.factor(tr[,2])
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]=as.factor(tr[,2])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.1)
train=p[[1]]
test=p[[2]]
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.05)
train=p[[1]]
test=p[[2]]
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(2,11,12)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(3,4,5,6,7,8,9,10),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.5,0.65,0.8,1),
sample_rate = c(0.4,0.5,0.6,0.7,0.8,0.9) ,
ntrees = c(15,20,30,40)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 1800,
max_models = 1000, seed = 1)
)
gbm_grid
train
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2,11,12)] ,
y = 'open_channels',
training_frame =   tr,  #train,
#validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 8,
min_rows = 30,
learn_rate = 0.1,
learn_rate_annealing = 1,
col_sample_rate = 0.5,
sample_rate = 0.8,
ntrees = 40,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
rs=predict(fit_gbm, newdata= te)
rs
res = (rs$predict %>% as.data.frame())$predict
res
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'last_gbm.csv'))
rs[,-1]
vec = apply(rs[,-1], 1, function(x) max(x) < 0.9 )
rs[1,-1]
rs[1,-1] %>% as.numeric()
rs[1,-1] %>% unclass()
rs[,-1] %>% as.data.frame()
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) < 0.9 )
rs[1,-1] %>%w
vec
sum(vec)
answer=read_csv(paste0(path.dir,'r942.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[!vec]=res[!vec]
write_csv(answer,paste0(path.dir,'l09.csv'))
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[!vec]=res[!vec]
write_csv(answer,paste0(path.dir,'l09.csv'))
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) > 0.95 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec]
write_csv(answer,paste0(path.dir,'l95.csv'))
answer
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) < 0.95 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec]
write_csv(answer,paste0(path.dir,'l95.csv'))
vec=!vec
vec
res[vec]
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer
answer$open_channels[vec]=res[vec]
answer
answer$open_channels[vec]=res[vec]
res[vec]
answer$open_channels=res
answer
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]
res[vec]
answer$open_channels[vec]=res[vec]
answer$open_channels[vec]
res[vec] %>% as.character()
answer$open_channels[vec]=res[vec] %>% as.character()
answer$open_channels[vec]
answer
write_csv(answer,paste0(path.dir,'l95.csv'))
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) > 0.9 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec] %>% as.character()
write_csv(answer,paste0(path.dir,'l9.csv'))
