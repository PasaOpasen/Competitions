library(tidyverse)
library(data.table)
library(magrittr)
data.path='D:/liverpool-ion-switching/'
train.path=paste0(data.path,'train','.csv')
test.path=paste0(data.path,'test','.csv')
sample.path=paste0(data.path,'sample_submission','.csv')
answer=read_csv(sample.path)
View(answer)
write_csv(answer,"result.csv")
View(answer)
train=read_csv(train.path)
test=read_csv(test.path)
View(test)
library(tidyverse)
library(data.table)
library(magrittr)
library(caret)
library(MLmetrics)
library(doSNOW)
data.path='D:/liverpool-ion-switching/'
train.path=paste0(data.path,'train','.csv')
test.path=paste0(data.path,'test','.csv')
sample.path=paste0(data.path,'sample_submission','.csv')
dt=read_csv(train.path)
dt %<>% mutate(chan=factor(open_channels,ordered = T),chan2=factor(paste0('l',open_channels)))
dt$chan %>% summary()
data=dt %>% group_by(chan) %>% slice(sample(1:n(),35000))
ggplot(data,aes(x=time,y=signal,col=chan))+geom_point()
calcF1Scores2=function(act,prd){
#treats the vectors like classes
#act and prd must be whole numbers
df=data.frame(act=act,prd=prd);
scores=numeric(11);
lv=levels(prd)
for(i in 0:10){
ii=lv[i+1]
tp=nrow(df[df$prd==ii & df$act==ii,]);
fp=nrow(df[df$prd==ii & df$act!=ii,]);
fn=nrow(df[df$prd!=ii & df$act==ii,]);
scores[i+1]=(2*tp)/(2*tp+fp+fn)
}
#print(scores)
return(mean(scores,na.rm = T))
}
f1 <- function (data, lev = NULL, model = NULL) {
answ=calcF1Scores2(data$obs,data$pred)
names(answ)="F1"
return(answ)
}
tr=trainControl(
method = 'cv',
number=10,
summaryFunction = f1,
classProbs = T,
verboseIter = T
)
data=dt %>% group_by(chan) %>% slice(sample(1:n(),30000))
fit.svm=train(x=data[c(1,2)],y=data$chan2,
method='RFlda',
trControl = tr,
maximize = T,
metric = 'F1')
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
test=read_csv(test.path)
res=fit.svm %>% predict(test) %>% str_sub(2) %>% as.numeric()
fit.svm=train(x=data[c(1,2)],y=data$chan2,
method='lda2',
trControl = tr,
maximize = T,
metric = 'F1')
calcF1Scores2(dt$chan2,fit.svm %>% predict(dt))
test=read_csv(test.path)
res=fit.svm %>% predict(test) %>% str_sub(2) %>% as.numeric()
answer=read_csv(sample.path)
answer$time=format(answer$time,nsmall = 4)
#answer$open_channels=sample(0:10,answer$time %>% length(),replace = T)
answer$open_channels=res
write_csv(answer,paste0(data.path,"result.csv"))
