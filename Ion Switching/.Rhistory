vec
sum(vec)
answer=read_csv(paste0(path.dir,'r942.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[!vec]=res[!vec]
write_csv(answer,paste0(path.dir,'l09.csv'))
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[!vec]=res[!vec]
write_csv(answer,paste0(path.dir,'l09.csv'))
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) > 0.95 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec]
write_csv(answer,paste0(path.dir,'l95.csv'))
answer
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) < 0.95 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec]
write_csv(answer,paste0(path.dir,'l95.csv'))
vec=!vec
vec
res[vec]
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer
answer$open_channels[vec]=res[vec]
answer
answer$open_channels[vec]=res[vec]
res[vec]
answer$open_channels=res
answer
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]
res[vec]
answer$open_channels[vec]=res[vec]
answer$open_channels[vec]
res[vec] %>% as.character()
answer$open_channels[vec]=res[vec] %>% as.character()
answer$open_channels[vec]
answer
write_csv(answer,paste0(path.dir,'l95.csv'))
vec = apply(rs[,-1] %>% as.data.frame(), 1, function(x) max(x) > 0.9 )
answer=read_csv('r942.csv')
answer$time=format(answer$time,nsmall = 4)
answer$open_channels[vec]=res[vec] %>% as.character()
write_csv(answer,paste0(path.dir,'l9.csv'))
install.packages(c("bst", "ggpubr", "git2r", "mda", "mnormt", "recipes", "rematch2", "rlang", "ROCR", "zoo"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial"))
pnorm(1.82,0,1)
install.packages("tidyverse")
install.packages(c("caret", "corrplot", "data.table", "doSNOW", "dplyr", "dse", "KFAS", "magrittr", "MLmetrics", "onehot", "RcppRoll", "readr", "tidyverse", "tsfeatures", "wmtsa", "xgboost"))
f = function(x) 0.955654100053241*(0.388975151328782 - t)^(2/3) + 0.880095973789201*(1 - 0.631289512049639*t)^(1/3) - 7
f(2)
f = function(t) 0.955654100053241*(0.388975151328782 - t)^(2/3) + 0.880095973789201*(1 - 0.631289512049639*t)^(1/3) - 7
f(2)
-2^2
(-2)^2
(-2)^(2/3)
2/3
(-2)^(2/3)
((-2)^2)^(1/3)
f=function(t) 0.955654100053241*((0.388975151328782 - t)^2)^(1/3) + 0.880095973789201*(1 - 0.631289512049639*t)^(1/3) - 7
f(2)
f(2)
(-2)^(1/3)
f=function(t) 0.955654100053241*((0.388975151328782 - t)^2)^(1/3) + 0.880095973789201*(1 - 0.631289512049639*t)^(1/3) - 7
library(tidyverse)
answer=tibble(
time=format(seq(500.0001,700.0000,length.out = 2000000),nsmall = 4),
open_channels=read_csv('best py result.csv')[[2]]
)
answer
write_csv(answer,'bestpy.csv')
install.packages(c("openxlsx", "pillar"), lib="C:/Program Files/R/R-3.6.3/library")
library(tidyverse)
library(magrittr)
dt= read_csv('train for by.csv')
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches), open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = 5e5))
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches), open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
dt
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),500)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+theme_bw()
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+theme_bw()
old = dt$signal
for(i in 1:9){
a = old[dt$open_channels==i]
b = old[dt$open_channels==i+1]
q90 = quantile(a,0.9)
q10 = quantile(b,0.1)
old[dt$open_channels>i]=old[dt$open_channels>i]+(q90-q10)
}
dt$old=old
library(tidyverse)
library(magrittr)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches), open_channels = factor(open_channels), chan = open_channels) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
library(tidyverse)
library(magrittr)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches),  chan = open_channels, open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+theme_bw()
old = dt$signal
for(i in 1:9){
a = old[dt$chan==i]
b = old[dt$chan==i+1]
q90 = quantile(a,0.9)
q10 = quantile(b,0.1)
old[dt$chan>i]=old[dt$chan>i]+(q90-q10)
}
dt$old=old
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+theme_bw()+
title(main= 'begin vers')
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+theme_bw()+
title(main = 'begin vers')
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+ theme_bw()+
labs(main = 'begin vers')
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=signal,col=open_channels))+
geom_point()+ theme_bw()+
labs(title  = 'begin vers')
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=old,col=open_channels))+
geom_point()+theme_bw()+
labs(title = 'old predictor')
summary(dt)
old = dt$signal
for(i in 1:9){
a = old[dt$chan==i]
b = old[dt$chan==i+1]
q90 = quantile(a,0.9)
q10 = quantile(b,0.1)
old[dt$chan>i]=old[dt$chan>i]+(q10-q90)
}
dt$old=old
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=old,col=open_channels))+
geom_point()+theme_bw()+
labs(title = 'old predictor')
summary(dt)
old = dt$signal
for(i in 1:9){
a = old[dt$chan==i]
b = old[dt$chan==i+1]
q90 = quantile(a,0.95)
q10 = quantile(b,0.05)
old[dt$chan>i]=old[dt$chan>i]+(q10-q90)
}
dt$old=old
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=old,col=open_channels))+
geom_point()+theme_bw()+
labs(title = 'old predictor')
summary(dt)
old = dt$signal
for(i in 1:9){
a = old[dt$chan==i]
b = old[dt$chan==i+1]
q90 = quantile(a,0.85)
q10 = quantile(b,0.15)
old[dt$chan>i]=old[dt$chan>i]+(q10-q90)
}
dt$old=old
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=old,col=open_channels))+
geom_point()+theme_bw()+
labs(title = 'old predictor')
summary(dt)
old = dt$signal
for(i in 1:9){
a = old[dt$chan==i]
b = old[dt$chan==i+1]
q90 = quantile(a,0.8)
q10 = quantile(b,0.2)
old[dt$chan>i]=old[dt$chan>i]+(q10-q90)
}
dt$old=old
ggplot(dt %>% group_by(open_channels) %>% slice(sample(1:n(), min(n(),800)  )),
aes(x=time, y=old,col=open_channels))+
geom_point()+theme_bw()+
labs(title = 'old predictor')
summary(dt)
library(tidyverse)
library(magrittr)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches),  chan = open_channels, open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
dt %>% group_by(open_channels) %>% slice(1:1000) %>%
ggplot(
aes(x=time, y=signal,col=open_channels))+
geom_point()+ theme_bw()+
labs(title  = 'begin vers')
install.packages("gganimate")
library(gganimate)
install.packages("gifski")
install.packages("av")
library(tidyverse)
library(magrittr)
library(gganimate)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches),  chan = open_channels, open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
dt %>% filter(batches == 4) %>% slice(1:500) %>%
ggplot(
aes(x=time, y=signal,col=open_channels))+
geom_point()+ theme_bw()+
labs(title  = 'begin vers')+
transition_reveal(time)
dt %>% filter(batches == 4) %>% slice(1:500) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()+
labs(title  = 'begin vers')+
transition_reveal(time)
install.packages("rgl")
install.packages("plot3D")
install.packages(c("pkgbuild", "tidyr"), lib="C:/Program Files/R/R-3.6.3/library")
# library
library(rgl)
# This is to output a rgl plot in a rmarkdown document. Note that you must add webgl=TRUE, results='hide' in the chunck header
#library(knitr)
#knit_hooks$set(webgl = hook_webgl)
# Data: the iris data is provided by R
data <- iris
# Add a new column with color
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
# Plot
par(mar=c(0,0,0,0))
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
library(tidyverse)
library(magrittr)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches),  chan = open_channels, open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
dt2=dt %>% filter(batches == 4) %>% slice(1:500)
data=dt %>% filter(batches == 4) %>% slice(1:500)
data$chan
data$chan + 1
mycolors <- c('royalblue1', 'darkcyan', 'oldlace','green','red','black','blue','pink','violet','brown','grey')
data$color <- mycolors[ data$chan + 1 ]
par(mar=c(0,0,0,0))
plot3d(
x=data$time, y=data$signal, z=sin(data$signal),
col = data$color,
type = 's',
radius = .1,
xlab="time", ylab="signal", zlab="func")
plot3d(
x=data$time, y=data$signal, z=exp(data$signal),
col = data$color,
type = 's',
radius = .1,
xlab="time", ylab="signal", zlab="func")
par(mar=c(0,0,0,0))
plot3d(
x=data$time, y=data$signal, z=cos(data$signal),
col = data$color,
type = 's',
radius = .1,
xlab="time", ylab="signal", zlab="func")
par(mar=c(0,0,0,0))
plot3d(
x=data$time, y=data$signal, z=(data$signal)^2,
col = data$color,
type = 's',
radius = .1,
xlab="time", ylab="signal", zlab="func")
par(mar=c(0,0,0,0))
plot3d(
x=data$time, y=data$signal, z=(data$signal)^2,
col = data$color,
type = 's',
#radius = .1,
xlab="time", ylab="signal", zlab="func")
install.packages("signal")
library(signal)
zplane(data$signal)
zplane(cheby2(data$signal))
bf <- butter(5, 0.2)
freqz(bf$b, bf$a)
## or "R-style" as:
freqz(bf)
ch <- cheby2(5, 20, 0.2)
freqz(ch, Fs = 100)  # frequency plot for a sample rate = 100 Hz
t <- seq(0, 1, by = 0.01)                     # 1 second sample, Fs = 100 Hz
x <- sin(2*pi*t*2.3) + 0.25*rnorm(length(t))  # 2.3 Hz sinusoid+noise
z <- filter(ch, x)  # apply filter
plot(t, x, type = "l")
lines(t, z, col = "red")
# look at the group delay as a function of frequency
grpdelay(ch, Fs = 100)
z <- filter(ch, data$signal)
z
t=data$time
x=data$signal
plot(t, x, type = "l")
lines(t, z, col = "red")
data %>% mutate(z=z) %>%
ggplot(
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
str(z)
as.numeric(z)
data %>% mutate(z=as.numeric(z)) %>%
ggplot(
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
ch <- cheby2(5, 20, 0.1)
z <- filter(ch, data$signal)
t=data$time
x=data$signal
plot(t, x, type = "l")
lines(t, z, col = "red")
ch <- cheby2(5, 20, 0.5)
z <- filter(ch, data$signal)
t=data$time
x=data$signal
plot(t, x, type = "l")
lines(t, z, col = "red")
data %>% mutate(z=as.numeric(z)) %>%
ggplot(
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
stats::fft(data$signal)
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
data %>% mutate(z=abs(fft(signal))) %>%
ggplot(
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
par(mar=c(0,0,0,0))
plot3d(
x=data$time, y=data$signal, z=abs(fft(data$signal)),
col = data$color,
type = 's',
#radius = .1,
xlab="time", ylab="signal", zlab="func")
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
data %>% mutate(z=abs(fft(signal))) %>% slice(2:300) %>%
ggplot(
aes(x=time, y=z))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
library(tidyverse)
library(magrittr)
dt= read_csv('train for py.csv')
dt %<>% select(signal, open_channels, batches) %>% filter(batches == 4 | batches ==9) %>%
mutate(batches=factor(batches),  chan = open_channels, open_channels = factor(open_channels)) %>%
group_by(batches) %>% mutate(time = seq(0.0001,50,length.out = n()))
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+ theme_bw()
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-signal[0])) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-dt$signal[0])) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-signal[1])) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
signal-signal[1]
dt$signal[1]
f=dt$signal[1]
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=time, y=signal))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-signal[1])) %>%
ggplot(
aes(x=time, y=s))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=time, y=s))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal[1]
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_line()+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% median()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cummin(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumpow(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumprod(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
cumprod(-1:6)
f=dt$signal %>% mean()
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
f=dt$signal[1]
dt %>% filter(batches == 4) %>% slice(1:500) %>%
mutate(s = cumsum(signal-f)) %>%
ggplot(
aes(x=signal, y=s))+
geom_point(aes(col=open_channels))+
theme_bw()
