id= als[trn$open_channels==i]
id=id[sample(1:length(id),3000+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
loclda=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method='loclda',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(k=c(100,150,200,250,300,350,400)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(loclda,newdata = test))
test_res
loclda
loclda$bestTune
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),2000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='loclda',
#family="binomial",
tuneGrid=expand.grid(k=250),
#trControl=control,
trControl=cv2,
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
library(doParallel)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),2000)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
models=c(
'amdai',
'dda',
'dwdPoly',
'dwdRadial',
'hdrda',
'mda',
'pda',
'qda',
'rda',
'sda',
'dwdLinear',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
'dda',
'dwdPoly',
'dwdRadial',
'hdrda',
'mda',
'pda',
'qda',
'rda',
'sda',
'dwdLinear',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
'dwdPoly',
'dwdRadial',
'hdrda',
'mda',
'pda',
'qda',
'rda',
'sda',
'dwdLinear',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
'dwdRadial',
'hdrda',
'mda',
'pda',
'qda',
'rda',
'sda',
'dwdLinear',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
rs=data.frame(name="name",test_res=0,time=0)
models=c(
'hdrda',
'mda',
'pda',
'qda',
'rda',
'sda',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
'mda',
'pda',
'qda',
'rda',
'sda',
'Mlda',
'qda',
'rlda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
# 'mda',
#'pda',
#'qda',
#'rda',
#'sda',
#'Mlda',
#'qda',
'rmda',
'smda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
models=c(
# 'mda',
#'pda',
#'qda',
#'rda',
#'sda',
#'Mlda',
#'qda',
#'rmda',
'slda'
)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
rs=data.frame(name="name",test_res=0,time=0)
rs=data.frame(name="name",test_res=0,time=0)
#rs=data.frame(name="name",test_res=0,time=0)
for(ft in models){
t=proc.time()
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=cv1,
#verbosity=T,
metric="F1")
t=proc.time()-t
stopCluster(cl)
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
#big_res= f1_(obs=trn$open_channels,pred=predict(lda.fit,newdata = trn)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
cv1=trainControl(method="cv",number=6,summaryFunction = f1)
cv2=trainControl(method = 'none',verboseIter = T)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),2000)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
