#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7#+
#sin(signal)+cos(signal)+
#signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
#tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,5,8),sigma=seq(0.01,0.1,length.out = 7)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7#+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
preProcess='BoxCox',
#family="binomial",
trControl= cv1,
#tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,5,8),sigma=seq(0.01,0.1,length.out = 7)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
cv1=trainControl(method="cv",number=6,summaryFunction = f1,verboseIter = T)
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
preProcess='BoxCox',
#family="binomial",
trControl= cv1,
#tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,5,8),sigma=seq(0.01,0.1,length.out = 7)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6#+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
#tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,5,8),sigma=seq(0.01,0.1,length.out = 7)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+#PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
#tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,5,8),sigma=seq(0.01,0.1,length.out = 7)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(mtry=1:12),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
svmRadialSigma
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),4000+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
#cl <- makePSOCKcluster(6)
#registerDoParallel(cl)
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(mtry=1:9),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
svmRadialSigma
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),11000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),25000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),25000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
gc()
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),20000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
res = predict(lda.fit,newdata = tst)
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_parRF mtry=2 count = 20000.csv'))
parRF=lda.fit
save(parRF,file="parRF mtry=2 count = 20000.rdata")
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),20000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=3),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
res = predict(lda.fit,newdata = tst)
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_parRF mtry=3 count = 20000.csv'))
parRF=lda.fit
save(parRF,file="parRF mtry=3 count = 20000.rdata")
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),23000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=3),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
gc()
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),22000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='parRF',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=3),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
res = predict(lda.fit,newdata = tst)
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_parRF mtry=3 count = 20000.csv'))
parRF=lda.fit
save(parRF,file="parRF mtry=3 count = 20000.rdata")
write_csv(answer,paste0(path.dir,'result_parRF mtry=3 count = 22000.csv'))
save(parRF,file="parRF mtry=3 count = 22000.rdata")
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),3000+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
#cl <- makePSOCKcluster(6)
#registerDoParallel(cl)
set.seed(1998)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=train,
method='rf',
#preProcess='BoxCox',
#family="binomial",
trControl= cv1,
tuneLength=8,
#tuneGrid=expand.grid(mtry=1:9),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
#stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
svmRadialSigma
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='rf',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),22000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
#sin(signal)+cos(signal)+
signal#+
#sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
#cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
#signal2#+
#time_batch
,
data=trn[id,],
method='rf',
#preProcess='BoxCox',
#family="binomial",
trControl= cv2,
tuneGrid=expand.grid(mtry=2),
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
res = predict(lda.fit,newdata = tst)
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_rf mtry=2 count = 22000.csv'))
rf=lda.fit
save(rf,file="rf mtry=2 count = 22000.rdata")
