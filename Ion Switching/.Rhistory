trn$outliers[id[ind]]
id[ind]
trn %<>% mutate(outliers=F)
for(btc in 0:9){
for(ch in 0:10){
id = als[trn$open_channels == ch & trn$batches == btc]
if(length(id)==0){
next
}
ind <- which(trn$signal[id] %in% boxplot.stats(trn$signal[id])$out)
if(length(ind)==0){
next
}
trn$outliers[id[ind]]=T
cat('batch = ',btc,' chan = ',ch,' len = ',length(ind),'\n')
}
}
sum(trn$outliers)/nrow(trn)
trn %>% group_by(open_channels) %>% summarise(count=sum(outliers))
ggplot()+
geom_point(data=trn %>% filter(outliers==F) %>% group_by(open_channels) %>% slice(sample(1:n(),600)),
aes(y=signal,x=time_batch,col=open_channels))+
geom_point(data=trn %>% filter(outliers==T)%>% group_by(open_channels)%>% slice(sample(1:n(),220)),
aes(y=signal,x=time_batch,col=open_channels),shape=4,size=2)+
facet_wrap(batches~.,scales = 'free')+
theme_bw()+theme(legend.position = 'bottom')
write_csv(trn %>% filter(outliers==F) %>% select(-outliers),path=paste0(path.dir,'train_clean.csv'))
ensemble.predict=function(fits,coefs,df){
result=predict(fits[[1]], df, type='prob')*coefs[1]
for(i in 2:length(coefs)){
result=result+predict(fits[[i]],df, type='prob')*coefs[i]
}
return(max.col(result,ties.method = 'first')-1)
}
trn=read_csv(paste0(path.dir,'train_clean.csv'))
als=1:nrow(trn)
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),3000)]) #+50*i
}
test.inds=id
fits=list()
scores=numeric()
for(k in 1:15){
id=numeric()
for(i in 0:10){
s= als[trn$open_channels[-test.inds]==i]
id= c(id,s[sample(1:length(s),5000)]) #+50*i
}
fits[[k]]=train(open_channels~PC1+PC2+PC3+PC4+PC5+PC6+PC7+signal+signal2+
sin(signal)+cos(signal)+
sin(PC1)+cos(PC1)+
sin(2*signal)+cos(2*signal)
,
data=trn[id,],
method="lda2",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
scores[k]=f1_(trn$open_channels[test.inds],predict( fits[[k]],trn[test.inds,]))
scores[k] %>% print()
}
scores
summary(scores)
for(k in 1:15){
id=numeric()
for(i in 0:10){
s= als[trn$open_channels[-test.inds]==i]
id= c(id,s[sample(1:length(s),5000)]) #+50*i
}
fits[[k]]=train(open_channels~PC1+PC2+PC3+PC4+PC5+PC6+PC7+signal+signal2+
sin(signal)+cos(signal)+
sin(PC1)+cos(PC1)+
sin(2*signal)+cos(2*signal)
,
data=trn[id,],
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
scores[k]=f1_(trn$open_channels[test.inds],predict( fits[[k]],trn[test.inds,]))
scores[k] %>% print()
}
trn %<>% mutate(open_channels=factor(open_channels))
fits=list()
scores=numeric()
for(k in 1:15){
id=numeric()
for(i in 0:10){
s= als[trn$open_channels[-test.inds]==i]
id= c(id,s[sample(1:length(s),5000)]) #+50*i
}
fits[[k]]=train(open_channels~PC1+PC2+PC3+PC4+PC5+PC6+PC7+signal+signal2+
sin(signal)+cos(signal)+
sin(PC1)+cos(PC1)+
sin(2*signal)+cos(2*signal)
,
data=trn[id,],
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
scores[k]=f1_(trn$open_channels[test.inds],predict( fits[[k]],trn[test.inds,]))
scores[k] %>% print()
}
library(tidyverse)
library(caret)
library(magrittr)
path.dir='./ignore_data/'
#test.dir=paste0(path.dir,'newtest.csv')
#train.dir=paste0(path.dir,'newtrain.csv')
test.dir=paste0(path.dir,'newtest_pca.csv')
train.dir=paste0(path.dir,'newtrain_pca.csv')
tst=read_csv(test.dir)
trn=read_csv(train.dir)
trn %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
f1 <- function (data, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=data$obs,predicted=data$pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
f1<- ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))
f1_val <- mean(f1)
names(f1_val) <- c("F1")
return(f1_val)
}
f1_ <- function (obs,pred, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
ensemble.predict=function(fits,coefs,df){
result=predict(fits[[1]], df, type='prob')*coefs[1]
for(i in 2:length(coefs)){
result=result+predict(fits[[i]],df, type='prob')*coefs[i]
}
return(max.col(result,ties.method = 'first')-1)
}
accshow=function(.fit, df){
ldafit<-predict(.fit,newdata = df)
table(df$open_channels, ldafit) %>% print()
f1(data.frame(obs=df$open_channels,pred=ldafit)) %>% print()
}
control <- trainControl(method="cv",number=5,summaryFunction = f1,verboseIter = T)
trn=read_csv(paste0(path.dir,'train_clean.csv'))
trn %<>% mutate(open_channels=factor(open_channels))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),3000)]) #+50*i
}
test.inds=id
fits=list()
scores=numeric()
for(k in 1:15){
id=numeric()
for(i in 0:10){
s= als[trn$open_channels[-test.inds]==i]
id= c(id,s[sample(1:length(s),5000)]) #+50*i
}
fits[[k]]=train(open_channels~PC1+PC2+PC3+PC4+PC5+PC6+PC7+signal+signal2+
sin(signal)+cos(signal)+
sin(PC1)+cos(PC1)+
sin(2*signal)+cos(2*signal)
,
data=trn[id,],
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
scores[k]=f1_(trn$open_channels[test.inds],predict( fits[[k]],trn[test.inds,]))
scores[k] %>% print()
}
scores
summary(scores)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,rep(1,15),trn[test.inds,])
)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores,trn[test.inds,])
)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores-0.918,trn[test.inds,])
)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores-0.92,trn[test.inds,])
)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores-0.923,trn[test.inds,])
)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores-0.924,trn[test.inds,])
)
fits=list()
scores=numeric()
for(k in 1:15){
id=numeric()
for(i in 0:10){
s= als[trn$open_channels[-test.inds]==i]
id= c(id,s[sample(1:length(s),3000)]) #+50*i
}
fits[[k]]=train(open_channels~PC1+PC2+PC3+PC4+PC5+PC6+PC7+signal+signal2+
sin(signal)+cos(signal)+
sin(PC1)+cos(PC1)+
sin(2*signal)+cos(2*signal)
,
data=trn[id,],
method="lda2",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
scores[k]=f1_(trn$open_channels[test.inds],predict( fits[[k]],trn[test.inds,]))
scores[k] %>% print()
}
scores
summary(scores)
f1_(
trn$open_channels[test.inds],
ensemble.predict(fits,scores-0.924,trn[test.inds,])
)
cv1=trainControl(method="cv",number=6,summaryFunction = f1,verboseIter = T)
cv2=trainControl(method = 'none',verboseIter = T)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),3000+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
id_train
train<-trn[id_train,]
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),3000+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
library(doParallel)
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
summary(trn)
summary(train)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),2500+50*i)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
min(1,2)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),min(2200+50*i,length(id)))]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
id_train=numeric()
id_test=numeric()
als=1:nrow(trn)
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),min(3000+50*i,length(id)))]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
cl <- makePSOCKcluster(6)
registerDoParallel(cl)
t=proc.time()
svmRadialSigma=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
data=train,
method='svmRadialSigma',
#family="binomial",
trControl= cv1,
tuneGrid=expand.grid(C=c(0.1,0.3,0.5,0.9,1,3,5,8),sigma=seq(0.01,0.15,length.out = 10)),
#verbosity=T,
metric="F1")
t=proc.time()-t
print(t)
stopCluster(cl)
test_res=f1_(obs=test$open_channels,pred=predict(svmRadialSigma,newdata = test))
test_res
svmRadialSigma
trn %>% group_by(open_channels) %>% n()
trn %>% group_by(open_channels) %>% n(.)
trn %>% group_by(open_channels) %>% summarise(count=n())
svmRadialSigma$bestTune
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),14000)]) #+50*i
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))+signal2#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='svmRadialSigma',
#family="binomial",
tuneGrid=expand.grid(C=0.5,sigma=0.0566667),
#trControl=control,
trControl=cv2,
#verbosity=T,
metric="F1")
system.time(
lda.fit %>% predict(newdata = tst[1:10000,]) # 3 для модели по 1000, 4.66 для 2000, 4.95 для 3000, 8.8 для 5000, 32 для 20 000
)
res=numeric(2000000)
for(i in 1:200) {
dp=(1+(i-1)*10000):(i*10000)
res[dp] = predict(lda.fit,newdata = tst[dp,])
print(i)
}
res=res-1
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_svmRadialSigma_withsignal2_clean C 0 5 sigma 0 0566667 count = 12000.csv'))
svmRadialSigma=lda.fit
save(svmRadialSigma,file="svmRadialSigma_withsignal2_clean C 0 5 sigma 0 0566667 count = 12000.rdata")
