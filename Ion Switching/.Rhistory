gc()
trn.pca=predict(mt,trn[,-c(2:4)])
gc()
trn.ica=predict(mt2,trn[,-c(2:4)])
gc()
gc()
trn.ica=predict(mt2,trn[,-c(2:4)])
rm(tst)
gc()
trn.ica=predict(mt2,trn[,-c(2:4)])
trn=cbind(trn[,1:4],trn.pca,trn.ica)
write_csv(trn,paste0(path.dir,'train_best.csv'))
corrplot::corrplot(cor(trn),method = 'number')
corrplot::corrplot(cor(trn[,-c(1:4)]),method = 'number')
rm(trn)
rm(trn.ica)
rm(trn.pca)
tst=read_csv(test.dir)
tst=tst%>% select(-all_of(nms))
tst[,1]=predict(mt3,tst[,1])
tst.pca=predict(mt,tst[,-c(2:3)])
tst.ica=predict(mt2,tst[,-c(2:3)])
tst=cbind(tst[,1:3],tst.pca,tst.ica)
write_csv(trn,paste0(path.dir,'test_best.csv'))
write_csv(tst,paste0(path.dir,'test_best.csv'))
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_best.csv'))
tst=read_csv(paste0(path.dir,'test_best.csv'))
id=numeric()
for(btc in 0:9){
if(btc %in% c(4,9)){
k=1
}else{
k=4
}
for(i in 0:10){
s= als[trn$open_channels==i & trn$batches==btc]
if(length(s)>0){
id= c(id,
s[sample(1:length(s),
min(1000*k,length(s)
))])
}
}
}
id=sort(id)
als=1:nrow(trn)
inds=c(0,0,0,0,0,0,1,1,1,1,0)
id=numeric()
for(btc in 0:9){
if(btc %in% c(4,9)){
k=1
}else{
k=4
}
for(i in 0:10){
s= als[trn$open_channels==i & trn$batches==btc]
if(length(s)>0){
id= c(id,
s[sample(1:length(s),
min(1000*k,length(s)
))])
}
}
}
id=sort(id)
colnames(trn)
colnames(tst)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn[,-c(1,3,4)]%>% as.h2o()
te=tst[,-c(1,2,3)]%>% as.h2o()
tr[,1]=as.factor(tr[,1])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(1)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 10,
min_rows = 20,
learn_rate = 0.2,
learn_rate_annealing = 1,
col_sample_rate = 0.2,
sample_rate = 1.0,
ntrees = 20,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
accshow(fit_gbm,test,T)
f1 <- function (data, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=data$obs,predicted=data$pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
f1<- ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))
f1_val <- mean(f1)
names(f1_val) <- c("F1")
return(f1_val)
}
f1_ <- function (obs,pred) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
accshow(fit_gbm,test,T)
id=numeric()
for(btc in 0:9){
if(btc %in% c(4,9)){
k=1
}else{
k=4
}
for(i in 0:10){
s= als[trn$open_channels==i & trn$batches==btc]
if(length(s)>0){
id= c(id,
s[sample(1:length(s),
min(1000*k,length(s)
))])
}
}
}
id=sort(id)
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(1)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(2,3,4,5,6,7,8,9,10,12),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.2,0.5,0.65,0.8,1),
sample_rate = c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) ,
ntrees = c(10,15,20,30,40,50)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 2000,
max_models = 1000, seed = 1)
)
gbm_grid
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(1)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 12,
min_rows = 50,
learn_rate = 0.1,
learn_rate_annealing = 1,
col_sample_rate = 0.8,
sample_rate = 0.6,
ntrees = 31,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
accshow(fit_gbm,test,T)
tr=trn[,-c(3,4)]%>% as.h2o()
te=tst[,-c(2,3)]%>% as.h2o()
tr[,2]=as.factor(tr[,2])
#tr[,12]=as.factor(tr[,12])
#te[,11]=as.factor(te[,11])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 12,
min_rows = 50,
learn_rate = 0.1,
learn_rate_annealing = 1,
col_sample_rate = 0.8,
sample_rate = 0.6,
ntrees = 31,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
accshow(fit_gbm,test,T)
id=numeric()
for(btc in 0:9){
if(btc %in% c(4,9)){
k=1
}else{
k=4
}
for(i in 0:10){
s= als[trn$open_channels==i & trn$batches==btc]
if(length(s)>0){
id= c(id,
s[sample(1:length(s),
min(1200*k,length(s)
))])
}
}
}
id=sort(id)
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(1)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(2,3,4,5,6,7,8,9,10,12),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.2,0.5,0.65,0.8,1),
sample_rate = c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) ,
ntrees = c(10,15,20,30,40,50)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 2000,
max_models = 1000, seed = 1)
)
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(2,3,4,5,6,7,8,9,10,12),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.2,0.5,0.65,0.8,1),
sample_rate = c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) ,
ntrees = c(10,15,20,30,40,50)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 2000,
max_models = 1000, seed = 1)
)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn[,-c(3,4)]%>% as.h2o()
te=tst[,-c(2,3)]%>% as.h2o()
tr[,2]=as.factor(tr[,2])
#tr[,12]=as.factor(tr[,12])
#te[,11]=as.factor(te[,11])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
gbm_grid <- h2o.grid(
'gbm',
grid_id = 'gr',
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  train, # trn1,  #
#validation_frame = test1,
nfolds=8,
hyper_params = list(
balance_classes = c(T,F),
max_depth = c(2,3,4,5,6,7,8,9,10,12),
min_rows = c(10,20,30,40,50),
learn_rate = c(0.05,0.1,0.2,0.3),
col_sample_rate = c(0.2,0.5,0.65,0.8,1),
sample_rate = c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) ,
ntrees = c(10,15,20,30,40,50)
),
search_criteria = list(
strategy = "RandomDiscrete",
max_runtime_secs = 2000,
max_models = 1000, seed = 1)
)
gbm_grid
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 8,
min_rows = 30,
learn_rate = 0.05,
learn_rate_annealing = 1,
col_sample_rate = 0.5,
sample_rate = 0.6,
ntrees = 1,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
accshow(fit_gbm,test,T)
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 10,
min_rows =20,
learn_rate = 0.2,
learn_rate_annealing = 1,
col_sample_rate = 0.2,
sample_rate = 1.0,
ntrees = 20,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
accshow(fit_gbm,test,T)
fit_gbm <- h2o.gbm(
x = colnames(train)[-c(2)] ,
y = 'open_channels',
training_frame =  tr,  #   tr,
validation_frame = test,
#nfolds = 5,
#fold_assignment = 'Stratified',
#verbose = T,
balance_classes = F,
#class_sampling_factors = c(1,1.25,2.25,1.85,3,4.5,6.6,4.6,5,9,35),
max_depth = 10,
min_rows =20,
learn_rate = 0.2,
learn_rate_annealing = 1,
col_sample_rate = 0.2,
sample_rate = 1.0,
ntrees = 20,
score_tree_interval = 10#,
#stopping_metric = 'misclassification',
# stopping_tolerance = 0.005
)
res = as.numeric((predict(fit_gbm, newdata= te)$predict %>% as.data.frame.array() %>% tbl_df())$predict)
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'gbmh2o.csv'))
accshow(fit_gbm,test,T)
h2o.shutdown()
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
read_csv('best py result.csv')[[2]]
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'trainsuper.csv'))
tst=read_csv(paste0(path.dir,'testsuper.csv'))
trn %<>% mutate(signal2=sign(signal)*sqrt(abs(signal))) %>%
select(-batches,-time_batch,-level2,-level_type)
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))  %>%
select(-batches,-time_batch,-level2,-level_type)
als=1:nrow(trn)
id=numeric()
for(lev in 0:1){
for(i in 0:10){
s= als[trn$open_channels==i & trn$level1==lev]
if(length(s)>0){
id= c(id,s[sample(1:length(s),min(8000,length(s)))])
}
}
}
id=sort(id)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
accshow=function(fit,df,get.matrix=F,plotting=T){
if(plotting){
plot(fit)
h2o.varimp_plot(fit)
}
if(get.matrix){
h2o.performance(fit, df) %>% print()
}
cat('F1 = ',f1_(
( df$open_channels %>% as.data.frame())$open_channels%>% as.numeric(),
(predict(fit, newdata= df)$predict %>% as.data.frame())$predict %>% as.numeric()
) ,'\n')
}
tr=trn%>% as.h2o()
te=tst %>% as.h2o()
tr[,2]
tr[,2]=as.factor(tr[,2])
p = h2o.splitFrame(data=tr[id,] ,ratios = 0.8)
train=p[[1]]
test=p[[2]]
colnames(train)
fit_svm <- h2o.psvm(
x = colnames(train)[-c(2,12)] ,
y = 'open_channels',
training_frame =  train,  #   tr,
validation_frame = test,
hyper_param = 1,
gamma = -1,
rank_ratio = -1,
positive_weight = 1,
negative_weight = 1,
disable_training_metrics = TRUE,
sv_threshold = 1e-04,
fact_threshold = 1e-05,
feasible_threshold = 0.001,
surrogate_gap_threshold = 0.001,
mu_factor = 10,
max_iterations = 200
)
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
library(tidyverse)
path.dir='./ignore_data/'
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=read_csv('best py result.csv')[[2]]
write_csv(answer,paste0(path.dir,'bestpy.csv'))
