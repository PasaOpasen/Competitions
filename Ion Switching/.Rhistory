I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
I(1/(1+signal^2))+
time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
exp(signal)+
exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
accshow(lda.fit,test)
accshow(lda.fit,rbind(train,test))
accshow(lda.fit,trn)
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=trn,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
ggplot(varImp(lda.fit))
res=lda.fit %>% predict(newdata = tst)
#writing_sample
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_lda_wideversa.csv'))
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+# PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6#+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
t=Sys.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+#PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method="lda",
family="binomial",
trControl=control,
verbosity=T,
metric="F1")
t=Sys.time()-t
times=c(times,t)
v=f1(data.frame(obs=test$open_channels,pred=predict(lda.fit,newdata = test)))
vals=c(vals,v)
gc()
library(tidyverse)
library(caret)
library(magrittr)
path.dir='./ignore_data/'
#test.dir=paste0(path.dir,'newtest.csv')
#train.dir=paste0(path.dir,'newtrain.csv')
test.dir=paste0(path.dir,'newtest_pca.csv')
train.dir=paste0(path.dir,'newtrain_pca.csv')
tst=read_csv(test.dir)
trn=read_csv(train.dir)
f1 <- function (data, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=data$obs,predicted=data$pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
f1<- ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))
f1_val <- mean(f1)
names(f1_val) <- c("F1")
f1_val
}
f1_ <- function (obs,pred, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
accshow=function(.fit, df){
ldafit<-predict(.fit,newdata = df)
table(df$open_channels, ldafit) %>% print()
f1(data.frame(obs=df$open_channels,pred=ldafit)) %>% print()
}
trn %<>% mutate(open_channels=factor(open_channels))
control <- trainControl(method="cv",number=5,summaryFunction = f1,verboseIter = T)
als=1:5000000
gc()
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),20000)])
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='svmLinear',
#family="binomial",
#tuneGrid=expand.grid(subclasses = 3),
#trControl=control,
trControl=trainControl(method = 'none',verboseIter = T),
#verbosity=T,
metric="F1")
res=lda.fit %>% predict(newdata = tst)
#writing_sample
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_svmLinear220000.csv'))
rs=read_csv(rs,"best models 6600 train 15400 test.csv")
fits=rs %>% filter(test_res>0.927) %>% select(name)
rs=read_csv("best models 6600 train 15400 test.csv")
fits=rs %>% filter(test_res>0.927) %>% select(name)
fits
fits=fits[,1]
fits
fits=fits$name
fits
rs=data.frame(name="name",test_res=0,time=0)
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),2000)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
rs %>% filter(test_res>0.927) %>% select(name)
rs=data.frame(name="name",test_res=0,time=0)
rs
for(ft in fits){
t=proc.time()
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=control,
tuneLength=5,
#verbosity=T,
metric="F1")
t=proc.time()-t
cat('calculating........\n')
nw=data.frame(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test)),
time=as.numeric(t)[3])
rs=rbind(rs,nw)
print(rs)
}
rs=read_csv("best models 6600 train 15400 test.csv")
fits=rs %>% filter(test_res>0.927) %>% select(name)
fits=fits$name
id_train=numeric()
id_test=numeric()
als=1:5000000
for(i in 0:10){
id= als[trn$open_channels==i]
id=id[sample(1:length(id),1000)]
id2<-createDataPartition(id,p = 0.3,list = F)[,1]
id_train=c(id_train,id[id2])
id_test=c(id_test, id[-id2])
}
train<-trn[id_train,]
test<-trn[id_test,]
lda.fit
lda.fit$bestTune
ensemble=list()
info=list()
ct=0
for(ft in fits){
t=proc.time()
ensemble[[ct]]=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=control,
tuneLength=6,
#verbosity=T,
metric="F1")
t=proc.time()-t
cat('calculating........\n')
info[[ct]]=list(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(ensemble[[ct]],newdata = test)),
time=as.numeric(t)[3],
tune=ensemble[[ct]]$bestTune
)
print(info)
ct=ct+1
}
ensemble=list()
info=list()
ct=0
for(ft in fits){
t=proc.time()
ensemble[[ct]]=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=control,
tuneLength=6,
#verbosity=T,
metric="F1")
t=proc.time()-t
cat('calculating........\n')
info[[ct]]=list(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(ensemble[[ct]],newdata = test)),
time=as.numeric(t)[3],
tune=ensemble[[ct]]$bestTune
)
print(info)
ct=ct+1
}
ensemble=list()
info=list()
ct=1
for(ft in fits){
t=proc.time()
ensemble[[ct]]=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
data=train,
method=ft,
#family="binomial",
trControl=control,
tuneLength=6,
#verbosity=T,
metric="F1")
t=proc.time()-t
cat('calculating........\n')
info[[ct]]=list(
name=ft,
test_res=f1_(obs=test$open_channels,pred=predict(ensemble[[ct]],newdata = test)),
time=as.numeric(t)[3],
tune=ensemble[[ct]]$bestTune
)
print(info)
ct=ct+1
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='svmLinear',
#family="binomial",
#tuneGrid=expand.grid(subclasses = 3),
#trControl=control,
trControl=trainControl(method = 'none',verboseIter = T),
#verbosity=T,
metric="F1")
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),20000)])
}
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ #PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='svmLinear',
#family="binomial",
#tuneGrid=expand.grid(subclasses = 3),
#trControl=control,
trControl=trainControl(method = 'none',verboseIter = T),
#verbosity=T,
metric="F1")
f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test))
lda.fit=train(open_channels ~ PC1 + PC2 + PC3 + PC4 + PC5+ PC6+PC7+
sin(signal)+cos(signal)+
signal+
sin(2*signal)+cos(2*signal)+
#sinpi(signal)+
cospi(signal)+
#exp(signal)+
#exp(-signal^2)+
I(1/(1+signal^2))#+
#time_batch
,
#data=train,
data=trn[id,],
#data=trn,
method='svmLinear',
#family="binomial",
#tuneGrid=expand.grid(subclasses = 3),
#trControl=control,
trControl=trainControl(method = 'none',verboseIter = T),
#verbosity=T,
metric="F1")
f1_(obs=test$open_channels,pred=predict(lda.fit,newdata = test))
res=lda.fit %>% predict(newdata = tst)
#writing_sample
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'result_svmLinear220000_7pc.csv'))
