res=h2o.predict(fit_gbm,tst)
h2o.shutdown(prompt = FALSE)
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(40000,length(s)))]) #+50*i
}
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
#trn=data.table::fread(paste0(path.dir,'train_clean.csv')) %>% as.h2o()
trn=trn[id,] %>% as.h2o()
tst=data.table::fread(paste0(path.dir,'newtest_pca.csv')) %>% as.h2o()
trn[,2]=as.factor(trn[,2])
set.seed(1998)
split <- h2o.runif(trn)
train <- trn [split <= 0.9,]
test <- trn [split > 0.9,]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,
max_depth = 4,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 200,
seed = 100)
plot(fit_gbm)
h2o.varimp_plot(fit_gbm)
perf<-h2o.performance(fit_gbm, test)
perf
h2o.F1(perf)
tst[1:10,]
predict(fit_gbm, newdata= tst[1:10,])
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
tst=tst %>% as.h2o()
predict(fit_gbm, newdata= tst[1:5,])
predict(fit_gbm, newdata= tst[1:5,]) %>% as.numeric()
predict(fit_gbm, newdata= tst[1:5,]) %>% as.data.frame()
predict(fit_gbm, newdata= tst[1:5,]) %>% as.data.frame() %>% max.col(ties.method = 'first')
predict(fit_gbm, newdata= tst[1:5,])$predict
predict(fit_gbm, newdata= tst[1:5,])$predict %>% as.data.frame()
predict(fit_gbm, newdata= tst[1:5,])$predict %>% as.numeric()
predict(fit_gbm, newdata= tst[1:5,])$predict %>% as.data.frame() %>% as.numeric()
predict(fit_gbm, newdata= tst[1:5,])$predict %>% as.data.frame()
res = predict(fit_gbm, newdata= tst[1:5,])$predict %>% as.data.frame()
res$predict
res$predict %>% as.numeric()
res = predict(fit_gbm, newdata= tst)$predict %>% as.data.frame()
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(60000,length(s)))]) #+50*i
}
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
#trn=data.table::fread(paste0(path.dir,'train_clean.csv')) %>% as.h2o()
trn=trn[id,] %>% as.h2o()
tst=tst %>% as.h2o()
trn[,2]=as.factor(trn[,2])
set.seed(1998)
split <- h2o.runif(trn)
train <- trn [split <= 0.9,]
test <- trn [split > 0.9,]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,
max_depth = 4,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 120,
seed = 100)
plot(fit_gbm)
h2o.varimp_plot(fit_gbm)
perf<-h2o.performance(fit_gbm, test)
perf
#h2o.F1(perf)
gc()
res = predict(fit_gbm, newdata= tst)$predict %>% as.data.frame()
res=res$predict %>% as.numeric()-1
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'fit_gbm 60000.csv'))
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(80000,length(s)))]) #+50*i
}
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(80000,length(s)))]) #+50*i
}
h2o.shutdown(prompt = FALSE)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(80000,length(s)))]) #+50*i
}
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(80000,length(s)))]) #+50*i
}
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
#trn=data.table::fread(paste0(path.dir,'train_clean.csv')) %>% as.h2o()
trn=trn[id,] %>% as.h2o()
tst=tst %>% as.h2o()
trn[,2]=as.factor(trn[,2])
set.seed(1998)
split <- h2o.runif(trn)
train <- trn [split <= 0.95,]
test <- trn [split > 0.95,]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,
max_depth = 4,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
plot(fit_gbm)
h2o.varimp_plot(fit_gbm)
perf<-h2o.performance(fit_gbm, test)
perf
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = trn,#train,
max_depth = 4,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
f1_ <- function (obs,pred, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
test %>% as.data.frame()
(predict(fit_gbm, newdata= tst)$predict %>% as.data.frame())$predict %>% as.numeric()-1
test$open_channels
test$open_channelsas.data.frame()%>% as.numeric()
test$open_channels %>% as.data.frame()%>% as.numeric()
test$open_channels %>% as.data.frame()
test$open_channels %>% as.data.frame()%>% as.numeric()
p=test$open_channels
p
p[,1]
p %>% as.data.frame() %>% as.numeric()
p %>% unclass()
p %>% as.numeric()
p[1]
(p %>% as.data.frame())$open_channels
f1_(
( test$open_channels %>% as.data.frame())$open_channels ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict -1
)
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(90000,length(s)))]) #+50*i
}
h2o.shutdown(prompt = FALSE)
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(90000,length(s)))]) #+50*i
}
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
trn=trn[id,] %>% as.h2o()
tst=tst %>% as.h2o()
trn[,2]=as.factor(trn[,2])
set.seed(1998)
split <- h2o.runif(trn)
train <- trn [split <= 0.95,]
test <- trn [split > 0.95,]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,#trn,
max_depth = 4,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
f1_ <- function (obs,pred, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,#trn,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = trn,#train,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
h2o.varimp_plot(fit_gbm)
gc()
res = predict(fit_gbm, newdata= tst)$predict %>% as.data.frame()
res=res$predict %>% as.numeric()-1
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'fit_gbm 90000.csv'))
h2o.shutdown(prompt = FALSE)
fit_gbm
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,# trn,
validation_frame = test,
verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
#trn=data.table::fread(paste0(path.dir,'train_clean.csv')) %>% as.h2o()
trn=trn[id,] %>% as.h2o()
tst=tst %>% as.h2o()
trn[,2]=as.factor(trn[,2])
set.seed(1998)
split <- h2o.runif(trn)
train <- trn [split <= 0.95,]
test <- trn [split > 0.95,]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,# trn,
validation_frame = test,
verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
als=1:nrow(trn)
# test inds
id=numeric()
for(i in 0:10){
s= als[trn$open_channels==i]
id= c(id,s[sample(1:length(s),min(90000,length(s)))]) #+50*i
}
f1_ <- function (obs,pred, lev = NULL,model=NULL) {
cm<-as.matrix(table(actual=obs,predicted=pred))
diag<-diag(cm)
rowsums<-apply(cm,1,sum)
colsums<-apply(cm,2,sum)
precision <- ifelse(colsums==0,0,diag/colsums)
recall  <- ifelse(rowsums==0,0,diag/rowsums)
return(mean(ifelse(precision+recall==0,0,2*precision*recall/(precision+recall))))
}
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
trn=trn[id,] %>% as.h2o()
tst=tst %>% as.h2o()
trn[,2]=as.factor(trn[,2])
p = h2o.splitFrame(data=trn,ratios = 0.9,seed=1)
train=p[[1]]
test=p[[2]]
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,# trn,
validation_frame = test,
verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 140,
seed = 100)
plot(fit_gbm)
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,# trn,
validation_frame = test,
#verbose = T,
max_depth = c(3,4,5),
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 50,
seed = 100)
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = train,# trn,
validation_frame = test,
#verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 50,
seed = 100)
plot(fit_gbm)
f1_(
( test$open_channels %>% as.data.frame())$open_channels%>% as.numeric() -1 ,
(predict(fit_gbm, newdata= test)$predict %>% as.data.frame())$predict %>% as.numeric() -1
)
tst
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
tst[,c(1,4:11)]
tst=tst[,c(1,4:11)] %>% as.h2o()
perf<-h2o.performance(fit_gbm, test)
perf
train %>% as.data.frame() %>% group_by(open_channels) %>% summarise(count=n())
test %>% as.data.frame() %>% group_by(open_channels) %>% summarise(count=n())
test$open_channels
levels(test$open_channels)
res=predict(fit_gbm, newdata= tst[sample(1:2000000,2000),])$predict
sp=sort(sample(1:2000000,2000))
res=predict(fit_gbm, newdata= tst[sp,])$predict
res0=predict(fit_gbm, newdata= tst[sp,])$predict
res0
res = (predict(fit_gbm, newdata= tst[sp,])$predict %>% as.data.frame())$predict %>% as.numeric() -1
res
res0==res
res0$predict==res
res0=predict(fit_gbm, newdata= tst[sp,])$predict%>% as.data.frame()
res0
res0$predict==res
res0
res0$predict
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'fit_gbm 90000.csv'))
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = trn,#   train,
#validation_frame = test,
#verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 50,
seed = 100)
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = trn,#   train,
#validation_frame = test,
#verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 100,
seed = 100)
res = (predict(fit_gbm, newdata= tst)$predict %>% as.data.frame())$predict# %>% as.numeric() -1
res = (predict(fit_gbm, newdata= tst)$predict %>% as.data.frame())$predict# %>% as.numeric() -1
res
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'fit_gbm 90000.csv'))
h2o.shutdown(prompt = FALSE)
library(tidyverse)
library(magrittr)
path.dir='./ignore_data/'
trn=read_csv(paste0(path.dir,'train_clean.csv'))
tst=read_csv(paste0(path.dir,'newtest_pca.csv'))
tst %<>% mutate(signal2=sign(signal)*sqrt(abs(signal)))
als=1:nrow(trn)
id=als
library(h2o)
h2o.init(nthreads = 6,
max_mem_size = "9g")
trn=trn[id,] %>% as.h2o()
tst=tst[,c(1,4:11)] %>% as.h2o()
trn[,2]=as.factor(trn[,2])
fit_gbm <- h2o.gbm(
x = colnames(train)[c(1,5:12)] ,
y = 'open_channels',
training_frame = trn,#   train,
#validation_frame = test,
#verbose = T,
max_depth = 5,
min_rows = 10,
learn_rate = 0.1,
col_sample_rate = 0.8,
sample_rate = 0.9,
ntrees = 100,
seed = 100)
res = (predict(fit_gbm, newdata= tst)$predict %>% as.data.frame())$predict# %>% as.numeric() -1
answer=read_csv(paste0(path.dir,'sample_submission.csv'))
answer$time=format(answer$time,nsmall = 4)
answer$open_channels=res
write_csv(answer,paste0(path.dir,'fit_gbm all.csv'))
h2o.shutdown(prompt = FALSE)
library(tidyverse)
