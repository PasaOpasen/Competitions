return <- -out
}
optim(par=c(0,0), fn=func, gr = NULL,
method = c("Nelder-Mead"),
lower = -Inf, upper = Inf,
control = list(), hessian = T)
library(Matrix)
E=eye(4)
install.packages("matlab")
library("matlab")
E=eye(4)
s=matrix(c(),nro2)
s=matrix(c(1,2,3,5,6,7,9,10,11,4,8,12),nrow=4,byrow = T)
E%*%s
E%*%s%*%eye(3)*3
x=c(2,2,4,6,6,4)
sum(x)
sum(x^2)
x=x/4
sum(x^2)
b=data.frame(D=c(10,7,12),V=c(60,50,75))
m=lm(D~V,b)
summary(m)
m$coefficients
library(ggvis)
library(tidyverse)
s=mtcars %>% ggvis(~disp,~wt)
s %>% layer_points()
s %>% layer_points() %>% layer_smooths(span = 0.4)
s %>% layer_points() %>% layer_smooths(span = 0.7)
s %>% layer_points(col=~facor(mpg)) %>% layer_smooths(span = 0.8)
s %>% layer_points(col=~factor(mpg)) %>% layer_smooths(span = 0.8)
s %>% layer_points(fill=~facor(mpg)) %>% layer_smooths(span = 0.8)
s %>% layer_points(fill=~factor(mpg)) %>% layer_smooths(span = 0.8)
s %>% layer_points(fill=~factor(cyl)) %>% layer_smooths(span = 0.8)
s %>% layer_points(fill=~factor(cyl)) %>% layer_smooths(span = 0.8) %>% layer_model_predictions("lm")
s %>% layer_points(fill=~factor(cyl)) %>% layer_smooths(span = 0.8) %>% layer_model_predictions(model="lm")
k=rbinom(1,50,0.55)
k
k=rbinom(0,1,0.55)
k=rbinom(50,1,0.55)
length(k==0)/50
length(k[k==0])/50
k==0
sum(k==0)/50
k=rbinom(50,1,0.55)
sum(k==0)/50
pos=0;neg=0
for(i in 1:100000){}
pos=0;neg=0
for(i in 1:100000){
if(sum(rbinom(50,1,0.55)>=0.5)){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in 1:100000){
if(sum(rbinom(50,1,0.55)/50>=0.5)){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
sum(rbinom(50,1,0.55)
o
pos=0;neg=0
for(i in 1:100000){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
rbinom(50,1,0.55)
sum(rbinom(50,1,0.55)
)
pos=0;neg=0
for(i in seq_alone(100000)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in seq(100000)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in seq(100000)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in seq(1000000)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in seq(1e8)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
pos=0;neg=0
for(i in seq(1e6)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
cat(pos/(pos+neg))
sum(rbinom(50000,1,0.55))/50000
sm=0
count.probs=1e3
count.votes=1e6
for(t in seq(count.probs)){
for(i in seq(count.votes)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
sm=sm+pos/(pos+neg)
}
cat(sm/count.probs)
sm=0
count.probs=1e3
count.votes=1e5
for(t in seq(count.probs)){
for(i in seq(count.votes)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
sm=sm+pos/(pos+neg)
}
cat(sm/count.probs)
sm=0
count.probs=1e3
count.votes=1e4
for(t in seq(count.probs)){
for(i in seq(count.votes)){
if(sum(rbinom(50,1,0.55))/50>=0.5){
pos=pos+1
}else{
neg=neg+1
}
}
sm=sm+pos/(pos+neg)
}
cat(sm/count.probs)
p=0.55
sm=0
for(i in 25:50){
sm=sm+choose(50,i)*p^i*(1-p)^(50-i)
}
cat(sm)
p=0.55
sm=0
for(i in 26:50){
sm=sm+choose(50,i)*p^i*(1-p)^(50-i)
}
cat(sm)
p=0.55
sm=0
for(i in 26:50){
sm=sm+choose(50,i)*p^i*(1-p)^(50-i)
}
sm=sm+choose(50,25)*p^25*(1-p)^25/2
cat(sm)
mean(c(-1,0,4,2,1,2))
median(c(-1,0,4,2,1,2))
sd(c(-1,0,4,2,1,2))
p1=C(0,1,2)
p1=c(0,1,2)
p2=c(2,1,0)
library(magrittr)
(p1-p2)^2 %>% sum() %>% sqrt() %>% cat('\n')
(p1-p2) %>% abs() %>% sum() %>% cat('\n')
(p1-p2) %>% abs() %>% max() %>% cat('\n')
scale(c(1,0,5,2,2))
v=c(1,0,5,2,2)
(v-min(v))/(max(v)-min(v))[1]
(v-min(v))/(max(v)-min(v))
v[1]
scale(v)
m=rbind(c(5,5,5,3),c(5,3,4,4),c(2,5,3,5),c(3,4,4,0))
p1=(m[1,]-m[4,]) %>% abs() %>% sum()
p2=(m[2,]-m[4,]) %>% abs() %>% sum()
p3=(m[4,]-m[4,]) %>% abs() %>% sum()
m
ro=c(p1,p2,p3)
p3=(m[3,]-m[4,]) %>% abs() %>% sum()
ro=c(p1,p2,p3)
1/sum(1/ro)*m[,4]/ro
1/sum(1/ro)*sum(m[,4]/ro)
m=rbind(c(5,5,5,3),c(5,3,4,4),c(2,5,3,5),c(3,4,4,0))
p1=(m[1,1:3]-m[4,1:3]) %>% abs() %>% sum()
p2=(m[2,1:3]-m[4,1:3]) %>% abs() %>% sum()
p3=(m[4,1:3]-m[4,1:3]) %>% abs() %>% sum()
ro=c(p1,p2,p3)
1/sum(1/ro)*m[,4]/ro
m=rbind(c(5,5,5,3),c(5,3,4,4),c(2,5,3,5),c(3,4,4,0))
p1=(m[1,1:3]-m[4,1:3]) %>% abs() %>% sum()
p2=(m[2,1:3]-m[4,1:3]) %>% abs() %>% sum()
p3=(m[3,1:3]-m[4,1:3]) %>% abs() %>% sum()
ro=c(p1,p2,p3)
1/sum(1/ro)*sum(m[,4]/ro)
(c(1,0,1,0,1,0)-c(1,1,0,1,1,0))^2 %>% sum() %>% sqrt() %>% cat('\n')
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x[!vec])/s)<0.5/length(x[!vec])
if(sum(vc)>0){
vec=vec|vs
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
install.packages("pracma")
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x[!vec])/s)<0.5/length(x[!vec])
if(sum(vc)>0){
vec=vec|vs
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x[!vec])/s)<0.5/length(x[!vec])
if(sum(vc)>0){
vec=vec|vc
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/length(x)
if(sum(vc)>k){
vec=vc
k=sum(vc)
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
if(sum(vc)>k){
vec=vc
k=sum(vc)
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
print(vc)
if(sum(vc)>k){
vec=vc
k=sum(vc)
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
print(erfc(abs(m-x)/s))
if(sum(vc)>k){
vec=vc
k=sum(vc)
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89))
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
#print(erfc(abs(m-x)/s))
if(sum(vc)>k){
vec=vc
k=sum(vc)
}else{
break
}
}
return(vec)
}
Schovene(c(1,2,500,3,2,0,-12,56,89,4,4,4,4,4,4,4,4))
debugSource('C:/Users/крендель/Desktop/Machine Learning/testhello/ShoveneCriterion.R', encoding = 'UTF-8')
x=c(8.02,8.16,3.97,8.64,0.84,4.46,0.81,7.74,8.78,9.26,20.46,29.87,10.38,25.71)
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
vec
length(x)-k
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
vc
if(sum(vc)>k){
vec=vc
k=sum(vc)
}
vec
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/(length(x)-k)
vc
x[!vec]
erfc(abs(m-x)/s)
0.5/(length(x)-k)
(length(x)-k)
x=c(8.02,8.16,3.97,8.64,0.84,4.46,0.81,7.74,8.78,9.26,20.46,29.87,10.38,25.71)
m=mean(x)
s=sd(x)
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
p=length(x)-k
m=mean(x[!vec])
s=sd(x[!vec])
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/p
#print(erfc(abs(m-x)/s))
if(sum(vc)>k){
vec=vc
k=sum(vc)
p=length(x)-k
}else{
break
}
m=mean(x[!vec])
s=sd(x[!vec])
erfc(abs(m-x)/s)<0.5/p
x
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/p
#print(erfc(abs(m-x)/s))
if(sum(vc)>k){
vec=vc
k=sum(vc)
p=length(x)-k
}else{
break
}
}
vec
library(pracma)
#выделение выбросов но критерию Шовене
Schovene=function(x){
m=mean(x)
s=sd(x)
vec=erfc(abs(m-x)/s)<0.5/length(x)
k=sum(vec)
p=length(x)-k
repeat{
m=mean(x[!vec])
s=sd(x[!vec])
vc=erfc(abs(m-x)/s)<0.5/p
#print(erfc(abs(m-x)/s))
if(sum(vc)>k){
vec=vc
k=sum(vc)
p=length(x)-k
}else{
break
}
}
return(vec)
}
Schovene(c(8.02,8.16,3.97,8.64,0.84,4.46,0.81,7.74,8.78,9.26,20.46,29.87,10.38,25.71))
c(8.02,8.16,3.97,8.64,0.84,4.46,0.81,7.74,8.78,9.26,20.46,29.87,10.38,25.71)[vec]
c(8.02,8.16,3.97,8.64,0.84,4.46,0.81,7.74,8.78,9.26,20.46,29.87,10.38,25.71)[!vec]
Obj=rbind(A=          1
1
0
B
0
2
-1
C
2
3
1
D
1
0
4)
Obj=rbind(c(1,1,0),c(0,2,-1),c(2,3,1),c(1,0,4))
v=numeric(4)
for(i in 1:4){
t=Obj[i,]
v[i]=sum(apply(Obj,1,function(x)sum(abs(t-x))))
}
